/*
 * Swagger Petstore - OpenAPI 3.0
 *
 * This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about Swagger at [http://swagger.io](http://swagger.io). In the third iteration of the pet store, we've switched to the design first approach! You can now help us improve the API whether it's by making changes to the definition itself or to the code. That way, with time, we can improve the API in general, and expose some of the new features in OAS3.  Some useful links: - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore) - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
 *
 * The version of the OpenAPI document: 1.0.11
 * Contact: apiteam@swagger.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Reflection;
using System.Threading.Tasks;
using PactNet;
using PactNet.Matchers;
using RestSharp;
using Xunit;
using Xunit.Abstractions;

using FluentAssertions;
using FluentAssertions.Extensions;
using Newtonsoft.Json;
using Newtonsoft.Json.Serialization;

using Petstore.Client;
using Petstore.Api;
using Petstore.Model;

using HttpMethod = System.Net.Http.HttpMethod;

namespace Petstore.Test.Api
{
  /// <summary>
  ///  Class for testing PetApi
  /// </summary>
  /// <remarks>
  /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
  /// Please update the test case below to test the API endpoint.
  /// </remarks>
  public class PetApiTests
  {
    private readonly IPactBuilderV3 pact;

    public PetApiTests(ITestOutputHelper output)
    {
      var config = new PactConfig
      {
        PactDir = "../../../pacts/",
        Outputters = new[]
        {
          new XUnitOutput(output)
        },
        DefaultJsonSettings = new JsonSerializerSettings
        {
          ContractResolver = new CamelCasePropertyNamesContractResolver()
        }
      };

      IPactV3 pact = Pact.V3("Event API Consumer", "Event API", config);
      this.pact = pact.UsingNativeBackend();
    }

    [Fact]
    public async Task FindPetByStatus_WhenCalled_ReturnsPet()
    {
      var example = new Pet(1, "Max", null, new List<string>());

      this.pact
          .UponReceiving("a request to retrieve all events")
              .WithRequest(HttpMethod.Get, "/pet/findByStatus")
              .WithHeader("Accept", "application/json")
              .WithQuery("status", "available")
          .WillRespond()
              .WithStatus(HttpStatusCode.OK)
              .WithHeader("Content-Type", "application/json; charset=utf-8")
              .WithJsonBody(Match.MinType(new
              {
                Name = Match.Regex("Max", "Max|Oliver|Charlie|Tiger|Smokey")
              }, 1));

      await this.pact.VerifyAsync(async ctx =>
      {
        var client = new PetApi(ctx.MockServerUri.ToString());

        List<Pet> pets = await client.FindPetsByStatusAsync("available");

        pets.Should().BeEquivalentTo(new[] { example });
      });
    }
  }
}
